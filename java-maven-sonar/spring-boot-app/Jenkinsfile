pipeline{
    agent any
    environment{
        IMAGE_REPO_NAME="mani-devops"
        IMAGE_TAG="latest"
        REPOSITORY_URI = "537823431186.dkr.ecr.ap-south-1.amazonaws.com/${IMAGE_REPO_NAME}"
        SONARQUBE_SERVER = "http://98.70.58.127:9000"
        SONARQUBE_TOKEN = "7a92d0f3a92350d38cafba04562ea8a81310ba9e"
        EC2_INSTANCE_IP="13.233.144.226"
        GITBRANCH_NAME="main"
        credentials_Id="jenkins-bitbucket"
        REPO_URL="https://github.com/Mani-tailwinds/jenkins-pipeline.git"
        ECR_URL="537823431186.dkr.ecr.ap-south-1.amazonaws.com"
        SSH_USERNAME="ubuntu"
        CONTAINER_NAME="condescending_gates"
        PORT_NUMBER="3003"
    }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        git branch: 'main', url: 'https://github.com/Mani-tailwinds/jenkins-pipeline.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
      
        sh 'cd java-maven-sonar/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "${SONARQUBE_SERVER}"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build  Docker Image') {

      steps {
        script {
            sh 'cd java-maven-sonar/spring-boot-app && docker build -t "${IMAGE_REPO_NAME}:${IMAGE_TAG}" .'
  }
      }
}
       stage('ECR push') {
            steps {
                script {
                    sh "aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${ECR_URL}"
                    sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:${IMAGE_TAG}"
                    sh "docker push ${ECR_URL}/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
                }
            }
        }
      stage('SSH deploy'){
            steps{
                sshagent(['ssh-agent-cred']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${SSH_USERNAME}@${EC2_INSTANCE_IP} '
                            #remove old container
                            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 537823431186.dkr.ecr.ap-south-1.amazonaws.com
                            docker pull 537823431186.dkr.ecr.ap-south-1.amazonaws.com/mani-devops:latest
                            if [ \$(docker ps -a -q -f name=${CONTAINER_NAME}) ]; then
                                docker rm -f ${CONTAINER_NAME}
                            fi
                            docker run -d --name condescending_gates -p 3003:3003 537823431186.dkr.ecr.ap-south-1.amazonaws.com/mani-devops:latest
                         '
                            
                    """
                }
               
            }
        }

      
      
  }
}
